#!/bin/bash

##--------------------------------------------------------------------
## Copyright (c) 2019 Dianomic Systems Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Ashish Jabble
##

set -e

# Default branch to package
BRANCH_NAME=main

USAGE="$(basename "$0") [-h] [-a] [-b <branch>] repository ...
This script is used to create the Debian package for a Fledge service

Arguments:
  -h	- Display this help text
  -a	- Remove all the versions
  -b	- Branch to base package on"

while getopts ":hab:" opt; do
	case "$opt" in
		a)
			if [ -d "./archive" ]; then
				echo -n "Cleaning the package archive folder..."
				rm -rf ./archive/*
				echo "Done."
			else
				echo "No archive folder, skipping cleanall"
			fi
			exit 0
			;;
		h)
			echo "${USAGE}"
			exit 0
			;;
		b)
			BRANCH_NAME=$OPTARG
			;;
		\?)
			echo "Invalid option -$OPTARG"
			exit 1
			;;
		:)
			echo "-$OPTARG requires an argument"
			exit 1
	esac
done
shift $((OPTIND -1))

REPO_NAME=$1

if [ "${REPO_NAME}" = "" ]; then
	echo You must specify service repository name to package
	exit 1
fi


while [ "${REPO_NAME}" != "" ]
do
	package_manager=deb
	architecture=`arch`
	PKG_ROOT=`pwd`
	archive=${PKG_ROOT}/archive/DEBIAN
	install_dir=services

	if [ ! -d "${archive}/${architecture}" ]; then
		mkdir -p "${archive}/${architecture}"
	fi

	cd /tmp
	if [ -d "${REPO_NAME}" ]; then
		echo WARNING: Repository ${REPO_NAME} already exists, using the existing copy
		(cd ${REPO_NAME}; git pull; git checkout "${BRANCH_NAME}")
	else
		git clone -b ${BRANCH_NAME} --single-branch https://github.com/fledge-iot/${REPO_NAME}.git
	fi

	GIT_ROOT=/tmp/"${REPO_NAME}"
	cd ${GIT_ROOT}

	if [ ! -f "${GIT_ROOT}/Package" ]; then
		echo Repository ${REPO_NAME} is missing package directive file
		rm -rf "${GIT_ROOT}"
		exit 1
	fi

	if [ ! -f "${GIT_ROOT}/Description" ]; then
		echo Repository ${REPO_NAME} is missing package description file
		rm -rf "${GIT_ROOT}"
		exit 1
	fi

	. "${GIT_ROOT}"/Package
	pkg_name="${REPO_NAME}"

    if [ -f "${GIT_ROOT}/VERSION" ]; then
        version=`cat ${GIT_ROOT}/VERSION | tr -d ' ' | grep 'notification_version' | head -1 | sed -e 's/\(.*\)version=\(.*\)/\2/g'`
        fledge_version=`cat ${GIT_ROOT}/VERSION | tr -d ' ' | grep 'fledge_version' | head -1 | sed -e 's/\(.*\)version\(.*\)/\2/g'`
    else
        echo Unable to determine version of package to create
        rm -rf "${GIT_ROOT}"
        exit 1
    fi

    BUILD_ROOT="${GIT_ROOT}/build"
    if [ "${package_name}" ]; then
        pkg_name=${package_name}
    else
        pkg_name="fledge-service-${service_name}"
    fi

    git_tag_info=$(git describe --tags) && commit_count=$(echo ${git_tag_info} | cut -d- -f2) || { commit_count=$(git rev-list --count HEAD); git_tag_info="v$version-$commit_count-g$(git rev-parse --short HEAD)"; }
    # Final package name
    archname=$(dpkg --print-architecture)
    if [[ ${BRANCH_NAME} != "main" ]] && [[ ! ${BRANCH_NAME} =~ ^[0-9]+\.[0-9]+\.[0-9]+RC ]]; then package_name="${pkg_name}_${version}-${commit_count}_${architecture}"; version=${git_tag_info:1}; else package_name="${pkg_name}-${version}-${architecture}"; fi

    # Print the summary of findings
    echo "The package root directory is                           : ${GIT_ROOT}"
    echo "The package build directory is                          : ${BUILD_ROOT}"
    echo "The Fledge required version                             : ${fledge_version}"
    echo "The Fledge service ${service_name} version is              : ${version}"
    echo "The architecture is set as                              : ${architecture}"
    echo "The package will be built in                            : ${archive}/${architecture}"
    echo "The package name is                                     : ${package_name}"
    echo

    # Create the package directory. If a directory with the same name exists,
    # it is copied with a version number.

    # First, create the BUILD_ROOT folder, if necessary
    if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
        mkdir -p "${BUILD_ROOT}"
    fi


    # Check if the default directory exists
    if [[ ! -d "${FLEDGE_ROOT}" ]]; then
        logger -p local0.err -t "fledge.script.fledge" "Fledge cannot be executed: ${FLEDGE_ROOT} is not a valid directory."
        echo "Fledge cannot be executed: ${FLEDGE_ROOT} is not a valid directory."
        echo "Create the enviroment variable FLEDGE_ROOT before using Fledge."
        echo "Specify the base directory for Fledge and set the variable with:"
        echo "export FLEDGE_ROOT=<basedir>"
        exit 1
    fi

    # Check/set LD_LIBRARY_PATH
    libPathSet=0
    libdir=${FLEDGE_ROOT}/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
    libdir=${FLEDGE_ROOT}/cmake_build/C/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
    [ "$libPathSet" -eq "0" ] && echo "Unable to set/update LD_LIBRARY_PATH to include path of Fledge shared libraries: check whether ${FLEDGE_ROOT}/lib or ${FLEDGE_ROOT}/cmake_build/C/lib exists" && exit 1
    
    # Make service
    rm -rf build; mkdir ./build; cd ./build; cmake ..; make; cd ..

    if [ -d "${BUILD_ROOT}/${package_name}" ]; then
        rm -rf ${BUILD_ROOT}/${pkg_name}*
    fi
    cd "${BUILD_ROOT}"
    mkdir "${package_name}"

    # Populate the package directory with Debian files
    # First with files common to all pla
    echo -n "Populating the package and updating version file..."
    cd "${package_name}"
    mkdir DEBIAN
    deb_path=${BUILD_ROOT}/${package_name}/DEBIAN
    cp -R ${PKG_ROOT}/packages/DEBIAN/* ${deb_path}
    sed -i "s/__VERSION__/${version}/g" ${deb_path}/control
    sed -i "s/__NAME__/${pkg_name}/g" ${deb_path}/control
    sed -i "s/__ARCH__/${archname}/g" ${deb_path}/control
    sed -i "s/__REQUIRES__/${requirements}/g" ${deb_path}/control
    sed -i "s/fledge,/fledge (${fledge_version}),/" ${deb_path}/control
    sed -i "s/fledge$/fledge (${fledge_version})/" ${deb_path}/control
    desc=`cat "${GIT_ROOT}/Description"`
    sed -i "s/__DESCRIPTION__/${desc}/g" ${deb_path}/control
    sed -i "s|__INSTALL_DIR__|${install_dir}|g" ${deb_path}/postinst
    if [[ ${BRANCH_NAME} = "main" ]] || [[ ${BRANCH_NAME} =~ ^[0-9]+\.[0-9]+\.[0-9]+RC ]]; then echo "Build: ${git_tag_info:1}" >> ${deb_path}/control; fi

    # Debian file structure
    mkdir -p usr/local/fledge
    cd usr/local/fledge
    if [ "${service_name}" = "notification" ]; then
        mkdir -p plugins/notificationDelivery
        mkdir -p plugins/notificationRule
        mkdir -p python/fledge/plugins/notificationDelivery
        mkdir -p python/fledge/plugins/notificationRule
    fi
    mkdir -p ${install_dir}
    cp "${GIT_ROOT}/build/C/${install_dir}/${service_name}/${exec_name}" "${install_dir}/${exec_name}"
    echo "Done."

    # Build the package
    cd "${BUILD_ROOT}"
    echo "Building the package..."
    dpkg-deb --build ${package_name}
    echo "Building Complete."

    # Move final package to archive directory
    cp ${BUILD_ROOT}/${package_name}.deb ${archive}/${architecture}
    cp -R ${BUILD_ROOT}/${package_name} ${archive}/${architecture}

    rm -rf /tmp/${REPO_NAME}

    exit 0
done
exit 0
