#!/bin/bash

##--------------------------------------------------------------------
## Copyright (c) 2019 Dianomic Systems Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Massimiliano Pinto, Ashish Jabble
##

set -e

# Default branch to package
BRANCH_NAME=master

USAGE="$(basename "$0") [-h] [-a] [-b <branch>] repository ...
This script is used to create the RPM package for a Fledge service

Arguments:
  -h	- Display this help text
  -a	- Remove all the versions
  -b	- Branch to base package on"

while getopts ":hab:" opt; do
	case "$opt" in
		a)
			if [ -d "./archive" ]; then
				echo -n "Cleaning the package archive folder..."
				rm -rf ./archive/*
				echo "Done."
			else
				echo "No archive folder, skipping cleanall"
			fi
			exit 0
			;;
		h)
			echo "${USAGE}"
			exit 0
			;;
		b)
			BRANCH_NAME=$OPTARG
			;;
		\?)
			echo "Invalid option -$OPTARG"
			exit 1
			;;
		:)
			echo "-$OPTARG requires an argument"
			exit 1
	esac
done
shift $((OPTIND -1))

REPO_NAME=$1

if [ "${REPO_NAME}" = "" ]; then
	echo You must specify service repository name to package
	exit 1
fi

# Check if the default directory exists
echo FLEDGE_ROOT = ${FLEDGE_ROOT}
if [ "${FLEDGE_ROOT}" = "" ]; then
echo "Notification server cannot be compiled: FLEDGE_ROOT environment variable is not set."
echo "Specify the base directory for Fledge and set the variable with:"
echo "export FLEDGE_ROOT=<basedir>"
exit 1
fi

if [ ! -d "${FLEDGE_ROOT}" ]; then
echo "Notification server cannot be compiled: ${FLEDGE_ROOT} is not a valid directory."
echo "Specify the base directory for Fledge and set the variable with:"
echo "export FLEDGE_ROOT=<basedir>"
exit 1
fi

# Check/set LD_LIBRARY_PATH
libPathSet=0
libdir=${FLEDGE_ROOT}/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
libdir=${FLEDGE_ROOT}/cmake_build/C/lib; [ -d ${libdir} ] && LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s|${libdir}||g") && export LD_LIBRARY_PATH=${libdir}:${LD_LIBRARY_PATH} && libPathSet=1
[ "$libPathSet" -eq "0" ] && echo "Unable to set/update LD_LIBRARY_PATH to include path of Fledge shared libraries: check whether ${FLEDGE_ROOT}/lib or ${FLEDGE_ROOT}/cmake_build/C/lib exists" && exit 1


while [ "${REPO_NAME}" != "" ]
do

    package_manager=rpm
    arch=`arch`
    PKG_ROOT=`pwd`
    archive=${PKG_ROOT}/archive/Rpm
    install_dir=services

    if [ ! -d "${archive}/${arch}" ]; then
        mkdir -p "${archive}/$arch"
    fi

    if [ ! -f packages/RPM/SPECS/service.spec ] ; then
        echo You must run this script from the root directory
        exit 1
    fi

    cd /tmp
    if [ -d "${REPO_NAME}" ]; then
        echo WARNING: Repository ${REPO_NAME} already exists, using the existing copy
        (cd ${REPO_NAME}; git pull; git checkout "${BRANCH_NAME}")
    else
        git clone -b "${BRANCH_NAME}" https://github.com/fledge-iot/${REPO_NAME}.git
    fi

    GIT_ROOT=/tmp/"${REPO_NAME}"
    cd ${GIT_ROOT}

    if [ ! -f "${GIT_ROOT}/Package" ]; then
        echo "Package file is missing in ${GIT_ROOT}"
        rm -rf "${GIT_ROOT}"
        exit 1
    fi

    if [ ! -f "${GIT_ROOT}/Description" ]; then
        echo "Description file is missing in ${GIT_ROOT}"
        rm -rf "${GIT_ROOT}"
        exit 1
    fi

    . "${GIT_ROOT}"/Package
    pkg_name="${REPO_NAME}"

    if [ -f "${GIT_ROOT}/VERSION" ]; then
        version=`cat "${GIT_ROOT}/VERSION" | tr -d ' ' | grep "notification_version" | head -1 | sed -e 's/\(.*\)version\([>=|>|<|<=|=]*\)\(.*\)/\3/g'`
        fledge_version=`cat ${GIT_ROOT}/VERSION| tr -d ' ' | grep 'fledge_version' | head -1 | sed -e 's/\(.*\)version\([>=|>|<|<=|=]*\)\(.*\)/\2 \3/g'`
    else
        echo Unable to determine version of package to create
        rm -rf "${GIT_ROOT}"
        exit 1
    fi

    BUILD_ROOT="${GIT_ROOT}/build"
    if [ "${package_name}" ]; then
        pkg_name=${package_name}
    else
        pkg_name="fledge-service-${service_name}"
    fi
    package_name="${pkg_name}-${version}"

    # Print the summary of findings
    echo "The package root directory is                           : ${GIT_ROOT}"
    echo "The package build directory is                          : ${BUILD_ROOT}"
    echo "The Fledge required version                            : ${fledge_version}"
    echo "The Fledge service ${service_name} version is          : ${version}"
    echo "The architecture is set as                              : ${arch}"
    echo "The package will be built in                            : ${archive}/${architecture}"
    echo "The package name is                                     : ${package_name}"
    echo

    # Create the package directory. If a directory with the same name exists,
    # it is copied with a version number.

    # First, create the BUILD_ROOT folder, if necessary
    if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
        mkdir -p "${BUILD_ROOT}"
    fi

    (cd ${GIT_ROOT};
    if [ -f requirements.sh ]; then
        ./requirements.sh
    fi

    if [ -f build.sh ]; then
        rm -rf build;
        ./build.sh
    else
        rm -rf build; mkdir ./build; cd ./build; cmake ..; make
    fi)

    cd "${BUILD_ROOT}"
    if [ -d "${package_name}" ]; then
        rm -rf ${package_name}*
    fi
    mkdir "${package_name}"

    # Populate the package directory with RPM files
    echo -n "Populating the package and updating version file..."
    cd "${package_name}"
    cp -R ${PKG_ROOT}/packages/RPM/* .
    sed -i "s/__VERSION__/${version}/g" SPECS/service.spec
    sed -i "s/__NAME__/${pkg_name}/g" SPECS/service.spec
    sed -i "s/__ARCH__/${arch}/g" SPECS/service.spec
    sed -i "s/__PACKAGE_NAME__/${package_name}/g" SPECS/service.spec
    sed -i "s|__INSTALL_DIR__|${install_dir}|g" SPECS/service.spec
    sed -i "s/__REQUIRES__/${requirements}/g" SPECS/service.spec
    sed -i "s/fledge,/fledge ${fledge_version},/" SPECS/service.spec
    sed -i "s/fledge$/fledge ${fledge_version}/" SPECS/service.spec

    cat > /tmp/sed.script.$$ << EOF
        /__DESCRIPTION__/ {
            r ${GIT_ROOT}/Description
            d
        }
EOF
    sed -i -f /tmp/sed.script.$$ SPECS/service.spec
    rm /tmp/sed.script.$$

    mkdir BUILDROOT
    cd BUILDROOT
    mkdir -p ${package_name}-1.${arch}
    cd ${package_name}-1.${arch}

    mkdir -p usr/local/fledge
    cd usr/local/fledge
    mkdir -p ${install_dir}
    cp -R --preserve=links ${GIT_ROOT}/build/C/${install_dir}/notification/fledge* "${install_dir}/"
    echo "Done."

    cd ..
    find -L . -type f -exec echo '%{install_path}/'{} \; >> ../../../../SPECS/service.spec
    cd "${BUILD_ROOT}"
    echo "Building the package..."
    rpmbuild --define "_topdir ${BUILD_ROOT}/${package_name}" --noclean -bb ${BUILD_ROOT}/${package_name}/SPECS/service.spec
    echo "Building Complete."

    # Full Package name
    fullname="${package_name}-1.${arch}.rpm"

    # Move final package and its spec file to archive/arch directory
    cp ${BUILD_ROOT}/${package_name}/RPMS/${arch}/${fullname} ${archive}/${arch}/${fullname}
    cp ${BUILD_ROOT}/${package_name}/SPECS/service.spec ${archive}/${arch}

    rm -rf /tmp/${REPO_NAME}
    exit 0
done
exit 0