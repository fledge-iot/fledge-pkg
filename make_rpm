#!/usr/bin/env bash

##--------------------------------------------------------------------
## Copyright (c) 2019 OSIsoft, LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Ivan Zoratti, Ashish Jabble, Stefano Simonelli
##

set -e

PKG_ROOT=`pwd`               # The script must be executed from the root git directory
repo_name="fledge"           # Name of the Git repository
branch="master"              # Default Git branch to use
pkg_name="fledge"           # Name of the package to build
architecture="x86_64"        # The architecture for which the rpm should be created
rhpg_pkg="rh-postgresql96"   # Name of the Red Hat package for postgres
rhgcc_pkg="devtoolset-7"     # Name of the Red Hat package for the newer g++
skip_build=0                 # 1=skip Git repo extraction and Fledge build

usage="$(basename "$0") [-h] [-c] [-a] [-s] [-b <branch>]
This script is used to create the RPM package of Fledge

Arguments:
 -h - Display this help text
 -c - Remove all the old versions saved in format .XXXX
 -a - Remove all the versions, including the last one
 -s - Skip Fledge building using the binaries already available
 -b - Branch to base package on"

while getopts ":hcasb:" opt; do
  case "$opt" in
    h)
      echo "${usage}"
      exit 0
      ;;
    c)
      if [ -d "${GIT_ROOT}/packages/RPM/build" ]; then
        echo -n "Cleaning the build folder from older versions..."
        find "${PKG_ROOT}/packages/RPM/build/BUILDROOT" -maxdepth 1 | grep '.*\.[0-9][0-9][0-9][0-9]' | sudo xargs rm -rf
        find "${PKG_ROOT}/packages/RPM/build/RPMS/${architecture}" -maxdepth 1 | grep '.*\.[0-9][0-9][0-9][0-9]' | sudo xargs rm -rf
        echo "Done."
      else
          echo "No build folder, skipping clean old versions"
      fi
      exit 0
      ;;
    a)
      if [ -d "${PKG_ROOT}/packages/RPM/build" ]; then
        echo -n "Cleaning the build folder..."
        sudo rm -rf ${PKG_ROOT}/packages/RPM/build/*
        echo "Done."
      else
        echo "No build folder, skipping cleanall"
      fi
      exit 0
      ;;
    s)
      skip_build=1
      ;;
    b)
      branch=$OPTARG
      ;;
    \?)
      echo "Invalid option -$OPTARG"
      exit 1
      ;;
    :)
      echo "-$OPTARG requires an argument"
      exit 1
  esac
done

if [ ! -f packages/rpmbuild/SPECS/fledge.spec ] ; then
	echo You must run this script from the fledge-pkg directory
	exit 1
fi

#
# Extracts/updates Git repository
#
if [[ $skip_build == 0 ]]; then
	cd /tmp
	if [ -d "${repo_name}" ]; then
		echo WARNING: Repository ${repo_name} already exists, using the existing copy
		(cd ${repo_name}; git fetch --all; git pull ; git checkout "$branch")
	else
		git clone -b "$branch" https://github.com/fledge-iot/${repo_name}.git
	fi

	GIT_ROOT=/tmp/"${repo_name}"
	cd ${GIT_ROOT}
fi

#
# Builds Fledge
#
if [[ $skip_build == 0 ]]; then

	# Backups FLEDGE_ROOT
	export FLEDGE_ROOT_BCK=${FLEDGE_ROOT}
	export FLEDGE_ROOT=${GIT_ROOT}
	export FLEDGE_DATA=${FLEDGE_ROOT}/data
	export PYTHONPATH=${FLEDGE_ROOT}/python

	set +e

	cd ${FLEDGE_ROOT}
	sudo ./requirements.sh

	# Enables/verifies the environment for the build
	source scl_source enable ${rhpg_pkg}
	status_rh_postgresql96=$?

	source scl_source enable ${rhgcc_pkg}
	status_devtoolset=$?

	command -v pg_isready > /dev/null
	status_pg_isready=$?

	if [[ $status_rh_postgresql96 != 0 ]]; then
		echo "ERROR : it is not possible to enable the ${rhpg_pkg} environment"
		exit 1
	fi

	if [[ $status_devtoolset != 0 ]]; then
		echo "ERROR : it is not possible to enable the ${rhgcc_pkg} environment"
		exit 1
	fi

	if [[ $status_pg_isready != 0 ]]; then
		echo "ERROR : the command pg_isready is not available"
		exit 1
	fi

	set -e

	make
	sudo make install

	# Restores FLEDGE_ROOT
	export FLEDGE_ROOT=${FLEDGE_ROOT_BCK}
fi

# Checks if the FLEDGE_ROOT environment is defined
if [[ "${FLEDGE_ROOT}" == "" ]]; then

    # Set FLEDGE_ROOT as the default directory
	export FLEDGE_ROOT="/usr/local/fledge"
fi

if [[ ! -d "${FLEDGE_ROOT}" ]]; then
  echo "No FLEDGE_ROOT directory found in the path ${FLEDGE_ROOT} - Program exit."
  exit 1
fi

version=`cat ${FLEDGE_ROOT}/VERSION | tr -d ' ' | grep 'fledge_version=' | head -1 | sed -e 's/\(.*\)=\(.*\)/\2/g'`
BUILD_ROOT="${PKG_ROOT}/packages/rpmbuild/BUILDROOT"

mkdir -p ${PKG_ROOT}/packages/RPM/build/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
mkdir -p ${PKG_ROOT}/packages/RPM/build/RPMS/x86_64

# Final package name
package_name="${pkg_name}-${version}-1.${architecture}"

# Print the summary of findings
echo "The package root directory is : ${PKG_ROOT}"
echo "The Fledge directory is      : ${FLEDGE_ROOT}"
echo "The Fledge version is        : ${version}"
echo "The package will be built in  : ${PKG_ROOT}/packages/RPM/build/RPMS/${architecture}"
echo "The package name is           : ${package_name}"
echo

# Create the package directory. If a directory with the same name exists,
# it is copied with a version number.

# First, create the BUILD_ROOT folder, if necessary
if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
    mkdir -p "${BUILD_ROOT}"
fi

cd "${BUILD_ROOT}"
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.%04d" "${existing_pkgs}")
if [ -d "${package_name}" ]; then
    echo "Saving the old working environment as ${new_stored_pkg}"
    mv "${package_name}" "${new_stored_pkg}"
fi
mkdir "${package_name}"

# Populate the package directory with Debian files
# First with files common to all pla
echo -n "Populating the package and updating version in control file..."
cd "${package_name}"

sed -i "s/__NAME__/${pkg_name}/g"     ${PKG_ROOT}/packages/RPM/SPECS/fledge.spec
sed -i "s/__VERSION__/${version}/g"   ${PKG_ROOT}/packages/RPM/SPECS/fledge.spec
sed -i "s/__ARCH__/${architecture}/g" ${PKG_ROOT}/packages/RPM/SPECS/fledge.spec

mkdir -p usr/local/fledge
cd usr/local/fledge
cp -R ${FLEDGE_ROOT}/* .
echo "Done."

# Prepare new data directory
echo "Prepare data directory"
mv data data.new
cd data.new
rm -rf backup
rm -rf core.err
rm -rf ./etc/certs/*
rm -rf fledge.db*
rm -rf logs
rm -rf scripts
rm -rf support
rm -rf var

# Build the package
cd "${BUILD_ROOT}"
cd ..
cd RPMS
cd ${architecture}

# Save the old versions
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.rpm.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.rpm.%04d" "${existing_pkgs}")

if [ -e "${package_name}.rpm" ]; then
    echo "Saving the old package as ${new_stored_pkg}"
    mv "${package_name}.rpm" "${new_stored_pkg}"
fi

echo "Building the new package..."
base_dir=${PKG_ROOT}/packages
rpmbuild --define "_topdir ${base_dir}/RPM/build" --noclean -bb ${base_dir}/RPM/SPECS/fledge.spec
echo "Building Complete."

if [[ $skip_build == 0 ]]; then
  rm -rf /tmp/${repo_name}
fi

exit 0
