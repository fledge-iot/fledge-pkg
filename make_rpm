#!/usr/bin/env bash

##--------------------------------------------------------------------
## Copyright (c) 2019 OSIsoft, LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Ivan Zoratti, Ashish Jabble, Stefano Simonelli
##

set -e

GIT_ROOT=`pwd`    # The script must be executed from the root git directory

pkg_name="foglamp"


architecture="none"
usage="$(basename "$0") help [clean|cleanall]
This script is used to create the RPM package of FogLAMP
Arguments:
 help     - Display this help text
 clean    - Remove all the old versions saved in format .XXXX
 cleanall - Remove all the versions, including the last one"

for i in "$@"
do
	case "$i" in
		clean)
			echo -n "Cleaning the build folder from older versions..."
			find "${GIT_ROOT}/packages/rpmbuild/BUILDROOT" -maxdepth 1 | grep '.*\.[0-9][0-9][0-9][0-9]' | xargs rm -rf
			echo "Done."
			exit 0
			;;
		cleanall)
			if [ -d "${GIT_ROOT}/packages/rpmbuild/BUILDROOT" ]; then

				echo -n "Cleaning the build folder..."
				sudo rm -rf ${GIT_ROOT}/packages/rpmbuild/BUILDROOT/*
				echo "Done."
			else
				echo "No build folder, skipping cleanall"
			fi
			exit 0
			;;

		help)
			echo "${usage}"
			exit 0
			;;
		*)
		echo "Unrecognized option: $i"
		exit 1
		;;
	esac
done

architecture="x86_64"

# If the architecture has not been defined, then the script is complete
if [[ "$architecture" == "none" ]]; then
  exit 0
fi

# Check FOGLAMP_ROOT
if [ -z ${FOGLAMP_ROOT+x} ]; then
    # Set FOGLAMP_ROOT as the default directory
    if [ -d "/usr/local/foglamp" ]; then
      FOGLAMP_ROOT="/usr/local/foglamp"
      export FOGLAMP_ROOT
    else
      echo "No FOGLAMP_ROOT directory found - Program exit."
      exit 1
    fi
fi

version=`cat ${FOGLAMP_ROOT}/VERSION | tr -d ' ' | grep 'foglamp_version=' | head -1 | sed -e 's/\(.*\)=\(.*\)/\2/g'`
BUILD_ROOT="${GIT_ROOT}/packages/rpmbuild/BUILDROOT"

# Final package name
package_name="${pkg_name}-${version}-0.00.${architecture}"

# Print the summary of findings
echo "The package root directory is : ${GIT_ROOT}"
echo "The FogLAMP directory is      : ${FOGLAMP_ROOT}"
echo "The FogLAMP version is        : ${version}"
echo "The package will be built in  : ${GIT_ROOT}/packages/rpmbuild/RPMS/${architecture}"
echo "The package name is           : ${package_name}"
echo

# Create the package directory. If a directory with the same name exists,
# it is copied with a version number.

# First, create the BUILD_ROOT folder, if necessary
if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
    mkdir -p "${BUILD_ROOT}"
fi

cd "${BUILD_ROOT}"
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.%04d" "${existing_pkgs}")
if [ -d "${package_name}" ]; then
    echo "Saving the old working environment as ${new_stored_pkg}"
    mv "${package_name}" "${new_stored_pkg}"
fi
mkdir "${package_name}"

# Populate the package directory with Debian files
# First with files common to all pla
echo -n "Populating the package and updating version in control file..."
cd "${package_name}"

sed -i "s/__NAME__/${pkg_name}/g"     ${GIT_ROOT}/packages/rpmbuild/SPECS/foglamp.spec
sed -i "s/__VERSION__/${version}/g"   ${GIT_ROOT}/packages/rpmbuild/SPECS/foglamp.spec
sed -i "s/__ARCH__/${architecture}/g" ${GIT_ROOT}/packages/rpmbuild/SPECS/foglamp.spec

mkdir -p usr/local/foglamp
cd usr/local/foglamp
cp -R ${FOGLAMP_ROOT}/* .
echo "Done."

# Prepare new data directory
echo "Prepare data directory"
# FIXME_I
#mv data data.new
cd data
rm -rf core.err
rm -rf ./etc/certs/*
rm -rf foglamp.db*
rm -rf var

# Build the package
cd "${BUILD_ROOT}"
cd ..
cd RPMS
cd ${architecture}

# Save the old versions
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.rpm.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.rpm.%04d" "${existing_pkgs}")

if [ -e "${package_name}.rpm" ]; then
    echo "Saving the old package as ${new_stored_pkg}"
    mv "${package_name}.rpm" "${new_stored_pkg}"
fi

echo "Building the new package..."
base_dir=${GIT_ROOT}/packages
rpmbuild --define "_topdir ${base_dir}/rpmbuild"   --noclean -bb ${base_dir}/rpmbuild/SPECS/foglamp.spec
echo "Building Complete."

exit 0
