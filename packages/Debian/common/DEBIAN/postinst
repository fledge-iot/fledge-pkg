#!/usr/bin/env bash

##--------------------------------------------------------------------
## Copyright (c) 2018 OSIsoft, LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------

##--------------------------------------------------------------------
##
## @postinst DEBIAN/postinst
## This script is used to execute post installation tasks.
##
## Author: Ivan Zoratti, Massimiliano Pinto
##
##--------------------------------------------------------------------

set -e

# certificate generation defaults
SSL_NAME="foglamp"
SSL_DAYS="365"
AUTH_NAME="ca"

link_update_task() {
    echo "Changing setuid of update_task.apt"
    chmod ugo+s /usr/local/foglamp/bin/update_task.apt
    echo "Removing task/update"
    [ -e /usr/local/foglamp/scripts/tasks/update ] && rm  /usr/local/foglamp/scripts/tasks/update
    echo "Create link file"
    ln -s /usr/local/foglamp/bin/update_task.apt /usr/local/foglamp/scripts/tasks/update
}

copy_foglamp_sudoer_file() {
    cp /usr/local/foglamp/bin/foglamp.sudoers /etc/sudoers.d/foglamp
}

copy_service_file() {
    cp /usr/local/foglamp/extras/scripts/foglamp.service /etc/init.d/foglamp
}

enable_foglamp_service() {
    systemctl enable foglamp
}

start_foglamp_service() {
    systemctl start foglamp
}

set_files_ownership () {
    chown root:root /etc/init.d/foglamp
    chown -R root:root /usr/local/foglamp
    chown -R ${SUDO_USER}:${SUDO_USER} /usr/local/foglamp/data
}

setuid_cmdutil () {
    chmod u+s /usr/local/foglamp/extras/C/cmdutil
}

generate_certs () {
    if [ ! -f /usr/local/foglamp/data/etc/certs/foglamp.cert ]; then
        echo "Certificate files do not exist. Generating new certificate files."
        cd /usr/local/foglamp
        ./scripts/certificates ${SSL_NAME} ${SSL_DAYS}
    else
        echo "Certificate files already exist. Skipping generating new certificate files."
    fi
}

generate_auth_certs () {
    if [ ! -f /usr/local/foglamp/data/etc/certs/ca.cert ]; then
        echo "CA Certificate file does not exist. Generating new CA certificate file."
        cd /usr/local/foglamp
        ./scripts/auth_certificates ca ${AUTH_NAME} ${SSL_DAYS}
    else
        echo "CA Certificate file already exists. Skipping generating new CA certificate file."
    fi
    if [ ! -f /usr/local/foglamp/data/etc/certs/admin.cert ]; then
        echo "Admin Certificate file does not exist. Generating new admin certificate file."
        cd /usr/local/foglamp
        ./scripts/auth_certificates user admin ${SSL_DAYS}
    else
        echo "Admin Certificate file already exists. Skipping generating new admin certificate file."
    fi
    if [ ! -f /usr/local/foglamp/data/etc/certs/user.cert ]; then
        echo "User Certificate file does not exist. Generating new user certificate file."
        cd /usr/local/foglamp
        ./scripts/auth_certificates user user ${SSL_DAYS}
    else
        echo "User Certificate file already exists. Skipping generating new user certificate file."
    fi
}

copy_new_data () {
    if [ ! -d /usr/local/foglamp/data ]; then
        echo "Data directory does not exist. Using new data directory"
        mv /usr/local/foglamp/data.new /usr/local/foglamp/data
    else
        echo "Data directory already exists. Updating data/extras/fogbench/fogbench_sensor_coap.template.json only."
        cp /usr/local/foglamp/data.new/extras/fogbench/fogbench_sensor_coap.template.json /usr/local/foglamp/data/extras/fogbench/fogbench_sensor_coap.template.json
        rm -rf /usr/local/foglamp/data.new
    fi
}

install_pip3_packages () {
    pip3 install -r /usr/local/foglamp/python/requirements.txt
}

# Call FogLAMP package update script
# Any message will be written by called update script
call_package_update_script () {
    # File created by presinstall hook
    installed_version_file="/usr/local/foglamp/.current_installed_version"
    if [ -s "${installed_version_file}" ]; then
        current_installed_version=`cat ${installed_version_file}`
        update_script="/usr/local/foglamp/scripts/package/debian/package_update.sh"
        # Check update script exists
        if [ -x "${update_script}" ] && [ -s "${update_script}" ] && [ -O "${update_script}" ]; then
            # Call Debian update script passing the previous version
            ${update_script} ${current_installed_version}
        fi
        # Update done: remove temp file
        rm ${installed_version_file}
    fi
}

# main
echo "Install python dependencies"
install_pip3_packages
echo "Resolving data directory"
copy_new_data
echo "Installing service script"
copy_service_file
echo "Generating certificate files"
generate_certs
echo "Generating auth certificate files"
generate_auth_certs
echo "Setting ownership of FogLAMP files"
set_files_ownership
echo "Calling FogLAMP package update script"
call_package_update_script
echo "Linking update task"
link_update_task
echo "Copying sodoers file"
copy_foglamp_sudoer_file
echo "Setting setuid bit of cmdutil"
setuid_cmdutil
echo "Enabling FogLAMP service"
enable_foglamp_service
echo "Starting FogLAMP service"
start_foglamp_service
